// configs
git config --global user.name <"name">
git config --global user.email <email>
git config --global core.editor <"code name(path) --wait">
git config --global -e (opens the file for editing in the previously configured code editor)
git config --global core.autocrlf true
git config --help
git config --global diff.tool vscode(naming)
git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"
(vscode [code] will be the tool for checking difference when using git)
(check git config --global -e to see if $LOCAL $REMOTE are there, if not add them)
git init

git config --global alias.lg " log --pretty=format:format:'%Cpurple%an%Creset %Cpink%h%Creset %Cgreen%cd%Creset'
"
git config --global alias.unstage "restore --staged ."

git config ff no
git config --global ff no


_______________________________________________________________________________________________________________

git add <name1> / <name1> <name2>
git add *.txt
git add .
git mv <File_name1 File_name2>

git rm <name1> / <name1> <name2>
git rm *.txt
git rm .
git rm -r --cached .
git rm -r --cached -r <name>(for recursively removing)

git commit (opens default editor for message)
git commit -m "Initial commit"
git commit -a (all, all modified, without using staging)
git commit -am <"message">

git restore --staged <file name / names  / *.<type> / .>
git restore .
git restore --source=HEAD ~<NUMBER> / <file name / names  / *.<type> / .>

git clean
git clean -fd

git checkout <commit ID> / <branch name> / <tag name>
git checkout <commit ID> <file name> ( to add a deleted file)

git branch <branch-name>
git branch
git switch <branch name>
git switch -C <branch name>
git branch -m <branch name> <new branch name>
git branch -d <branch name>
git branch -D <branch name>
git branch --merged
git branch --no-merged


git stash push -am "<message>"
git stash push -m "<message>"
git stash list
git stash show <number>
git stash apply <number>
git stash drop <number>
git stash clear

git merge <branch-name>
git merge --no-ff <branch-name>
git merge --abort
git merge --squash <name>

git rebase <name>
git rebase --continue
git rebase --skip   
git rebase --abort

git reset --<soft/mixed/hard> HEAD~<NUMBER>
git reset --<soft/mixed/hard> <commit's id>

git revert -m 1 HEAD



git bisect start => git bisect bad => git bisect good <commit id> => git bisect good / bad => git bisect reset

____________________________________________________________________________________________________________________

git status
git status -s

git ls-files
git ls-files --cached
git ls-tree HEAD/~1..

git diff
git diff HEAD~<number> HEAD / <file name> / --name-only /..
git diff --staged
git diff <branch>..<branch>
git diff <branch> (difference between my and the mantioned branch)
git diff --name-only/name-status <branch name>
git difftool
git difftool --staged

git log(q to quit)
git log <file name> / --stat <file name> / --patch <file name>
git log --oneline
git log --oneline --all
git log --oneline --all --graph
git log --oneline --3
git log --oneline --after="<year-mt-dy> / yesterday / x day/s/week/s ago"
git log --oneline --author="<name>"
git log --oneline --grep="<content>"
git log --oneline --S"<file_content(for functions)>"
git log --oneline --S"<file_content(for functions)>" --patch
git log --oneline --reverse
git log --oneline --stat
git log --oneline --patch
git log --oneline -- <file name>
git log --oneline --patch -- <file name>
git log --oneline <commit's identifier>..<commit's ID>
git log --pretty=format:"%an / %h / %cd"
git log --pretty=format:"%Cgreen%an%Creset %Cred%h%Creset %Cblue%cd%Creset"
git log <branch>..<branch>

git shortlog -n /+ -s /+ -e /+ --before="" / --after=""

git blame  / -e / L <line number>,<line number> <file name>

git tag <name> <commit id>
git tag -a <name> -m "<message>"
git tag
git tag -d <tag name>

git show / <tag name> / HEAD / HEAD~<number>/ HEAD~<number>:<file name> / HEAD~<number> --name-only / HEAD~<number> --name-status / HEAD~<number>:<file name>


____________________________________________________________________________________________________________________

ls
mv
rm

github.com/github/gitignore (a website that tells you what to ignore)